package renderer

import (
	"bytes"
	"io"
	"os"
	"strings"
	"testing"
)

// captureOutput –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–≤–æ–¥ –≤ stdout –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ –≤—Å–µ–º –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
func captureOutput(f func()) string {
	old := os.Stdout
	r, w, _ := os.Pipe()
	os.Stdout = w

	f()

	err := w.Close()
	if err != nil {
		return ""
	}
	os.Stdout = old

	var buf bytes.Buffer
	_, err = io.Copy(&buf, r)
	if err != nil {
		return ""
	}
	return buf.String()
}

// TestNewDrawTask –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ DrawTask
// –¢–µ—Å—Ç —É–±–µ–∂–¥–∞–µ—Ç—Å—è —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
func TestNewDrawTask(t *testing.T) {
	task := NewDrawTask()

	if task == nil {
		t.Fatal("NewDrawTask –≤–µ—Ä–Ω—É–ª nil")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—è –∏–º–µ—é—Ç –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
	if task.Width != 0 {
		t.Errorf("–ù–∞—á–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 0, –ø–æ–ª—É—á–µ–Ω–æ %d", task.Width)
	}

	if task.Height != 0 {
		t.Errorf("–ù–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 0, –ø–æ–ª—É—á–µ–Ω–æ %d", task.Height)
	}

	if task.Position.X != 0 || task.Position.Y != 0 {
		t.Errorf("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å (0, 0), –ø–æ–ª—É—á–µ–Ω–æ (%d, %d)",
			task.Position.X, task.Position.Y)
	}

	if task.Content != nil {
		t.Error("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å nil")
	}
}

// TestSetContent –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–¥–∞—á–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
// –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤ (fluent API)
func TestSetContent(t *testing.T) {
	tests := []struct {
		name    string
		content []string
	}{
		{
			name:    "–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤",
			content: []string{},
		},
		{
			name:    "–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞",
			content: []string{"hello"},
		},
		{
			name:    "–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫",
			content: []string{"line1", "line2", "line3"},
		},
		{
			name:    "—Å—Ç—Ä–æ–∫–∏ —Å unicode",
			content: []string{"–ø—Ä–∏–≤–µ—Ç", "–º–∏—Ä", "üéâ"},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			task := NewDrawTask()
			result := task.SetContent(tt.content)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º –æ–±—ä–µ–∫—Ç
			if result != task {
				t.Error("SetContent –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–∞–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤")
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
			if len(task.Content) != len(tt.content) {
				t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å %d —Å—Ç—Ä–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ %d",
					len(tt.content), len(task.Content))
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
			for i, line := range tt.content {
				if task.Content[i] != line {
					t.Errorf("–°—Ç—Ä–æ–∫–∞ %d: –æ–∂–∏–¥–∞–ª–æ—Å—å %q, –ø–æ–ª—É—á–µ–Ω–æ %q",
						i, line, task.Content[i])
				}
			}
		})
	}
}

// TestSetSize –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–∞–∑–º–µ—Ä–æ–≤ –∑–∞–¥–∞—á–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
// –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –º–µ–Ω—å—à–µ 1, –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑–≤–∞—Ç—å—Å—è SetAutoSize
func TestSetSize(t *testing.T) {
	tests := []struct {
		name          string
		width, height int
		content       []string
		expectAuto    bool
	}{
		{
			name:       "–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã",
			width:      10,
			height:     5,
			content:    []string{"test"},
			expectAuto: false,
		},
		{
			name:       "–Ω—É–ª–µ–≤–∞—è —à–∏—Ä–∏–Ω–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä",
			width:      0,
			height:     5,
			content:    []string{"test", "hello"},
			expectAuto: true,
		},
		{
			name:       "–Ω—É–ª–µ–≤–∞—è –≤—ã—Å–æ—Ç–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä",
			width:      10,
			height:     0,
			content:    []string{"test", "hello", "world"},
			expectAuto: true,
		},
		{
			name:       "–æ–±–∞ –Ω—É–ª–µ–≤—ã–µ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä",
			width:      0,
			height:     0,
			content:    []string{"test"},
			expectAuto: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			task := NewDrawTask().SetContent(tt.content)
			result := task.SetSize(tt.width, tt.height)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç self
			if result != task {
				t.Error("SetSize –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–∞–º –æ–±—ä–µ–∫—Ç")
			}

			if tt.expectAuto {
				// –ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–∞–∑–º–µ—Ä–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
				if task.Width == 0 && len(tt.content) > 0 && len(tt.content[0]) > 0 {
					t.Error("SetAutoSize –¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∏—Ä–∏–Ω—É")
				}
				if task.Height == 0 && len(tt.content) > 0 {
					t.Error("SetAutoSize –¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã—Å–æ—Ç—É")
				}
			} else {
				// –ü—Ä–∏ —è–≤–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
				if task.Width != tt.width {
					t.Errorf("–®–∏—Ä–∏–Ω–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å %d, –ø–æ–ª—É—á–µ–Ω–æ %d", tt.width, task.Width)
				}
				if task.Height != tt.height {
					t.Errorf("–í—ã—Å–æ—Ç–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å %d, –ø–æ–ª—É—á–µ–Ω–æ %d", tt.height, task.Height)
				}
			}
		})
	}
}

// TestSetAutoSize –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
// –®–∏—Ä–∏–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Å–∞–º–æ–π –¥–ª–∏–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –≤—ã—Å–æ—Ç–∞ - –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–æ–∫
func TestSetAutoSize(t *testing.T) {
	tests := []struct {
		name           string
		content        []string
		expectedWidth  int
		expectedHeight int
	}{
		{
			name:           "–æ–¥–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞",
			content:        []string{"hi"},
			expectedWidth:  2,
			expectedHeight: 1,
		},
		{
			name:           "–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã",
			content:        []string{"short", "medium line", "x"},
			expectedWidth:  11, // "medium line"
			expectedHeight: 3,
		},
		{
			name:           "unicode —Å–∏–º–≤–æ–ª—ã",
			content:        []string{"–ø—Ä–∏–≤–µ—Ç", "–º–∏—Ä"},
			expectedWidth:  6, // "–ø—Ä–∏–≤–µ—Ç"
			expectedHeight: 2,
		},
		{
			name:           "–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤",
			content:        []string{},
			expectedWidth:  0,
			expectedHeight: 0,
		},
		{
			name:           "—Å—Ç—Ä–æ–∫–∏ —Å —ç–º–æ–¥–∑–∏",
			content:        []string{"hello üéâ", "test"},
			expectedWidth:  8, // "hello üéâ" - 8 —Ä—É–Ω
			expectedHeight: 2,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			task := NewDrawTask().SetContent(tt.content)
			result := task.SetAutoSize()

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç self
			if result != task {
				t.Error("SetAutoSize –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–∞–º –æ–±—ä–µ–∫—Ç")
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∏—Ä–∏–Ω—É
			if task.Width != tt.expectedWidth {
				t.Errorf("–®–∏—Ä–∏–Ω–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å %d, –ø–æ–ª—É—á–µ–Ω–æ %d", tt.expectedWidth, task.Width)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É
			if task.Height != tt.expectedHeight {
				t.Errorf("–í—ã—Å–æ—Ç–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å %d, –ø–æ–ª—É—á–µ–Ω–æ %d", tt.expectedHeight, task.Height)
			}
		})
	}
}

// TestSetAutoSizePanic –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ SetAutoSize –ø–∞–Ω–∏–∫—É–µ—Ç –ø—Ä–∏ nil –∫–æ–Ω—Ç–µ–Ω—Ç–µ
// –≠—Ç–æ –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
func TestSetAutoSizePanic(t *testing.T) {
	defer func() {
		if r := recover(); r == nil {
			t.Error("SetAutoSize –¥–æ–ª–∂–µ–Ω –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å –ø—Ä–∏ nil Content")
		}
	}()

	task := NewDrawTask()
	task.SetAutoSize() // –î–æ–ª–∂–Ω–æ —Å–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å
}

// TestSetWidth –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–æ–ª—å–∫–æ —à–∏—Ä–∏–Ω—ã
func TestSetWidth(t *testing.T) {
	task := NewDrawTask()
	result := task.SetWidth(42)

	if result != task {
		t.Error("SetWidth –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–∞–º –æ–±—ä–µ–∫—Ç")
	}

	if task.Width != 42 {
		t.Errorf("–®–∏—Ä–∏–Ω–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å 42, –ø–æ–ª—É—á–µ–Ω–æ %d", task.Width)
	}
}

// TestSetHeight –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ—Ç—ã
func TestSetHeight(t *testing.T) {
	task := NewDrawTask()
	result := task.SetHeight(24)

	if result != task {
		t.Error("SetHeight –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–∞–º –æ–±—ä–µ–∫—Ç")
	}

	if task.Height != 24 {
		t.Errorf("–í—ã—Å–æ—Ç–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å 24, –ø–æ–ª—É—á–µ–Ω–æ %d", task.Height)
	}
}

// TestSetPosition –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
func TestSetPosition(t *testing.T) {
	tests := []struct {
		name string
		x, y int
	}{
		{
			name: "–Ω–∞—á–∞–ª–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
			x:    0,
			y:    0,
		},
		{
			name: "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
			x:    10,
			y:    20,
		},
		{
			name: "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
			x:    -5,
			y:    -10,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			task := NewDrawTask()
			result := task.SetPosition(tt.x, tt.y)

			if result != task {
				t.Error("SetPosition –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–∞–º –æ–±—ä–µ–∫—Ç")
			}

			if task.Position.X != tt.x {
				t.Errorf("X: –æ–∂–∏–¥–∞–ª–æ—Å—å %d, –ø–æ–ª—É—á–µ–Ω–æ %d", tt.x, task.Position.X)
			}

			if task.Position.Y != tt.y {
				t.Errorf("Y: –æ–∂–∏–¥–∞–ª–æ—Å—å %d, –ø–æ–ª—É—á–µ–Ω–æ %d", tt.y, task.Position.Y)
			}
		})
	}
}

// TestSetColorSchema –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
func TestSetColorSchema(t *testing.T) {
	tests := []struct {
		name   string
		fg, bg string
	}{
		{
			name: "–æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞",
			fg:   "red",
			bg:   "white",
		},
		{
			name: "–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
			fg:   "",
			bg:   "",
		},
		{
			name: "—Ç–æ–ª—å–∫–æ foreground",
			fg:   "blue",
			bg:   "",
		},
		{
			name: "—Ç–æ–ª—å–∫–æ background",
			fg:   "",
			bg:   "yellow",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			task := NewDrawTask()
			result := task.SetColorSchema(tt.fg, tt.bg)

			if result != task {
				t.Error("SetColorSchema –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–∞–º –æ–±—ä–µ–∫—Ç")
			}

			if task.ColorSchema.FG != tt.fg {
				t.Errorf("FG: –æ–∂–∏–¥–∞–ª–æ—Å—å %q, –ø–æ–ª—É—á–µ–Ω–æ %q", tt.fg, task.ColorSchema.FG)
			}

			if task.ColorSchema.BG != tt.bg {
				t.Errorf("BG: –æ–∂–∏–¥–∞–ª–æ—Å—å %q, –ø–æ–ª—É—á–µ–Ω–æ %q", tt.bg, task.ColorSchema.BG)
			}
		})
	}
}

// TestFluentAPI –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –º–µ—Ç–æ–¥—ã –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Ü–µ–ø–æ—á–∫–æ–π
// –≠—Ç–æ –ø–∞—Ç—Ç–µ—Ä–Ω Builder –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
func TestFluentAPI(t *testing.T) {
	task := NewDrawTask().
		SetContent([]string{"line1", "line2"}).
		SetPosition(10, 20).
		SetWidth(50).
		SetHeight(10).
		SetColorSchema("green", "black")

	if task.Position.X != 10 || task.Position.Y != 20 {
		t.Error("SetPosition –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –≤ —Ü–µ–ø–æ—á–∫–µ")
	}

	if task.Width != 50 {
		t.Error("SetWidth –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –≤ —Ü–µ–ø–æ—á–∫–µ")
	}

	if task.Height != 10 {
		t.Error("SetHeight –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –≤ —Ü–µ–ø–æ—á–∫–µ")
	}

	if len(task.Content) != 2 {
		t.Error("SetContent –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –≤ —Ü–µ–ø–æ—á–∫–µ")
	}

	if task.ColorSchema.FG != "green" || task.ColorSchema.BG != "black" {
		t.Error("SetColorSchema –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –≤ —Ü–µ–ø–æ—á–∫–µ")
	}
}

// TestColorToANSI –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –Ω–∞–∑–≤–∞–Ω–∏–π —Ü–≤–µ—Ç–æ–≤ –≤ ANSI –∫–æ–¥—ã
func TestColorToANSI(t *testing.T) {
	tests := []struct {
		name     string
		color    string
		expected string
	}{
		{name: "—á–µ—Ä–Ω—ã–π", color: "black", expected: "30"},
		{name: "–∫—Ä–∞—Å–Ω—ã–π", color: "red", expected: "31"},
		{name: "–∑–µ–ª–µ–Ω—ã–π", color: "green", expected: "32"},
		{name: "–∂–µ–ª—Ç—ã–π", color: "yellow", expected: "33"},
		{name: "—Å–∏–Ω–∏–π", color: "blue", expected: "34"},
		{name: "–ø—É—Ä–ø—É—Ä–Ω—ã–π", color: "magenta", expected: "35"},
		{name: "–≥–æ–ª—É–±–æ–π", color: "cyan", expected: "36"},
		{name: "–±–µ–ª—ã–π", color: "white", expected: "37"},
		{name: "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç", color: "unknown", expected: "37"}, // –î–µ—Ñ–æ–ª—Ç
		{name: "–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞", color: "", expected: "37"},           // –î–µ—Ñ–æ–ª—Ç
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := colorToANSI(tt.color)
			if result != tt.expected {
				t.Errorf("colorToANSI(%q) = %q, –æ–∂–∏–¥–∞–ª–æ—Å—å %q",
					tt.color, result, tt.expected)
			}
		})
	}
}

// TestColorToBgANSI –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –Ω–∞–∑–≤–∞–Ω–∏–π —Ü–≤–µ—Ç–æ–≤ —Ñ–æ–Ω–∞ –≤ ANSI –∫–æ–¥—ã
func TestColorToBgANSI(t *testing.T) {
	tests := []struct {
		name     string
		color    string
		expected string
	}{
		{name: "—á–µ—Ä–Ω—ã–π —Ñ–æ–Ω", color: "black", expected: "40"},
		{name: "–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω", color: "red", expected: "41"},
		{name: "–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω", color: "green", expected: "42"},
		{name: "–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω", color: "yellow", expected: "43"},
		{name: "—Å–∏–Ω–∏–π —Ñ–æ–Ω", color: "blue", expected: "44"},
		{name: "–ø—É—Ä–ø—É—Ä–Ω—ã–π —Ñ–æ–Ω", color: "magenta", expected: "45"},
		{name: "–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω", color: "cyan", expected: "46"},
		{name: "–±–µ–ª—ã–π —Ñ–æ–Ω", color: "white", expected: "47"},
		{name: "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞", color: "unknown", expected: "40"}, // –î–µ—Ñ–æ–ª—Ç
		{name: "–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–æ–Ω–∞", color: "", expected: "40"},           // –î–µ—Ñ–æ–ª—Ç
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := colorToBgANSI(tt.color)
			if result != tt.expected {
				t.Errorf("colorToBgANSI(%q) = %q, –æ–∂–∏–¥–∞–ª–æ—Å—å %q",
					tt.color, result, tt.expected)
			}
		})
	}
}

// TestApplyColors –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã —á–µ—Ä–µ–∑ ANSI –∫–æ–¥—ã
func TestApplyColors(t *testing.T) {
	tests := []struct {
		name   string
		schema ColorSchema
		checks []string // –ü–æ–¥—Å—Ç—Ä–æ–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≤—ã–≤–æ–¥–µ
	}{
		{
			name:   "—Ç–æ–ª—å–∫–æ foreground",
			schema: ColorSchema{FG: "red", BG: ""},
			checks: []string{"\033[31m"},
		},
		{
			name:   "—Ç–æ–ª—å–∫–æ background",
			schema: ColorSchema{FG: "", BG: "blue"},
			checks: []string{"\033[44m"},
		},
		{
			name:   "–æ–±–∞ —Ü–≤–µ—Ç–∞",
			schema: ColorSchema{FG: "green", BG: "yellow"},
			checks: []string{"\033[32m", "\033[43m"},
		},
		{
			name:   "–±–µ–∑ —Ü–≤–µ—Ç–æ–≤",
			schema: ColorSchema{FG: "", BG: ""},
			checks: []string{},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			output := captureOutput(func() {
				applyColors(tt.schema)
			})

			for _, check := range tt.checks {
				if !strings.Contains(output, check) {
					t.Errorf("–í—ã–≤–æ–¥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ–¥ %q. –í—ã–≤–æ–¥: %q",
						check, output)
				}
			}

			if len(tt.checks) == 0 && output != "" {
				t.Errorf("–ü—Ä–∏ –ø—É—Å—Ç–æ–π —Å—Ö–µ–º–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–≤–æ–¥–∞, –ø–æ–ª—É—á–µ–Ω–æ: %q", output)
			}
		})
	}
}

// TestDraw –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ANSI –∫–æ–¥—ã –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
func TestDraw(t *testing.T) {
	tests := []struct {
		name   string
		task   *DrawTask
		checks []string // –ü–æ–¥—Å—Ç—Ä–æ–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
	}{
		{
			name: "–ø—Ä–æ—Å—Ç–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞",
			task: NewDrawTask().
				SetContent([]string{"test"}).
				SetPosition(5, 10),
			checks: []string{
				"\033[?25l",   // HideCursor
				"\033[10;5H",  // MoveTo(5, 10)
				"X: 5, Y: 10", // –ö–æ–Ω—Ç–µ–Ω—Ç
				"\033[0m",     // –°–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π
			},
		},
		{
			name: "—Å —Ü–≤–µ—Ç–∞–º–∏",
			task: NewDrawTask().
				SetContent([]string{"colored"}).
				SetPosition(1, 1).
				SetColorSchema("red", "white"),
			checks: []string{
				"\033[31m", // –ö—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
				"\033[47m", // –ë–µ–ª—ã–π —Ñ–æ–Ω
				"\033[0m",  // –°–±—Ä–æ—Å
			},
		},
		{
			name: "–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫",
			task: NewDrawTask().
				SetContent([]string{"line1", "line2", "line3"}).
				SetPosition(10, 5),
			checks: []string{
				"X: 10, Y: 5", // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
				"X: 10, Y: 6", // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
				"X: 10, Y: 7", // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			output := captureOutput(func() {
				tt.task.Draw()
			})

			for _, check := range tt.checks {
				if !strings.Contains(output, check) {
					t.Errorf("–í—ã–≤–æ–¥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É %q.\n–ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥: %q",
						check, output)
				}
			}
		})
	}
}

// TestDrawWithEmptyContent –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Å –ø—É—Å—Ç—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
// –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–∞–Ω–∏–∫–∏, –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
func TestDrawWithEmptyContent(t *testing.T) {
	task := NewDrawTask().
		SetContent([]string{}).
		SetPosition(1, 1)

	output := captureOutput(func() {
		task.Draw()
	})

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
	if !strings.Contains(output, "\033[?25l") {
		t.Error("–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω HideCursor")
	}

	if !strings.Contains(output, "\033[0m") {
		t.Error("–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π")
	}
}
