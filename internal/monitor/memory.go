package monitor

import (
	"fmt"
	"runtime"
	"sync"
	"time"
)

type MemoryStats struct {
	Timestamp    time.Time
	AllocMB      float64 // –¢–µ–∫—É—â–∞—è –∞–ª–ª–æ—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å
	TotalAllocMB float64 // –û–±—â–∞—è –∞–ª–ª–æ—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –∑–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
	SysMB        float64 // –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å
	NumGC        uint32  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–±–æ—Ä–æ–∫ –º—É—Å–æ—Ä–∞
	Goroutines   int     // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä—É—Ç–∏–Ω
	HeapObjects  uint64  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∫—É—á–µ
}

type MemoryMonitor struct {
	stats      []MemoryStats
	interval   time.Duration
	running    bool
	stopChan   chan bool
	mutex      sync.RWMutex
	maxRecords int
}

func NewMemoryMonitor(interval time.Duration, maxRecords int) *MemoryMonitor {
	return &MemoryMonitor{
		stats:      make([]MemoryStats, 0),
		interval:   interval,
		stopChan:   make(chan bool),
		maxRecords: maxRecords,
	}
}

// Start –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (m *MemoryMonitor) Start() {
	if m.running {
		return
	}

	m.running = true

	go func() {
		ticker := time.NewTicker(m.interval)
		defer ticker.Stop()

		for {
			select {
			case <-ticker.C:
				m.collectStats()
			case <-m.stopChan:
				return
			}
		}
	}()
}

// Stop –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (m *MemoryMonitor) Stop() {
	if !m.running {
		return
	}

	m.running = false
	m.stopChan <- true
}

// –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
func (m *MemoryMonitor) collectStats() {
	var memStats runtime.MemStats
	runtime.ReadMemStats(&memStats)

	stats := MemoryStats{
		Timestamp:    time.Now(),
		AllocMB:      float64(memStats.Alloc) / 1024 / 1024,
		TotalAllocMB: float64(memStats.TotalAlloc) / 1024 / 1024,
		SysMB:        float64(memStats.Sys) / 1024 / 1024,
		NumGC:        memStats.NumGC,
		Goroutines:   runtime.NumGoroutine(),
		HeapObjects:  memStats.HeapObjects,
	}

	m.mutex.Lock()
	defer m.mutex.Unlock()

	m.stats = append(m.stats, stats)

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
	if len(m.stats) > m.maxRecords {
		m.stats = m.stats[1:]
	}
}

// GetCurrentStats –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (m *MemoryMonitor) GetCurrentStats() MemoryStats {
	m.mutex.RLock()
	defer m.mutex.RUnlock()

	if len(m.stats) == 0 {
		return MemoryStats{}
	}

	return m.stats[len(m.stats)-1]
}

// GetAllStats –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
func (m *MemoryMonitor) GetAllStats() []MemoryStats {
	m.mutex.RLock()
	defer m.mutex.RUnlock()

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é
	result := make([]MemoryStats, len(m.stats))
	copy(result, m.stats)
	return result
}

// PrintCurrent –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
func (m *MemoryMonitor) PrintCurrent() (AllocMB, SysMB, NumGC, Goroutines, HeapObjects string) {
	current := m.GetCurrentStats()
	if current.Timestamp.IsZero() {
		return "0.00 MB", "0.00 MB", "0", "0", "0"
	}

	allocMB := fmt.Sprintf(`%.2f MB`, current.AllocMB)
	sysMB := fmt.Sprintf(`%.2f MB`, current.SysMB)
	numGC := fmt.Sprintf(`%d`, current.NumGC)
	goroutines := fmt.Sprintf(`%d`, current.Goroutines)
	heapObjects := fmt.Sprintf(`%d`, current.HeapObjects)

	return allocMB, sysMB, numGC, goroutines, heapObjects
}

// PrintDelta –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
func (m *MemoryMonitor) PrintDelta(seconds int) {
	all := m.GetAllStats()
	if len(all) < 2 {
		fmt.Println("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
		return
	}

	now := time.Now()
	var start, end MemoryStats

	// –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
	for i := len(all) - 1; i >= 0; i-- {
		if now.Sub(all[i].Timestamp).Seconds() <= float64(seconds) {
			if end.Timestamp.IsZero() {
				end = all[i]
			}
			start = all[i]
		}
	}

	if start.Timestamp.IsZero() || end.Timestamp.IsZero() {
		fmt.Printf("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ %d —Å–µ–∫—É–Ω–¥\n", seconds)
		return
	}

	allocDelta := end.AllocMB - start.AllocMB
	gcDelta := int(end.NumGC) - int(start.NumGC)
	goroutineDelta := end.Goroutines - start.Goroutines
	objectsDelta := int64(end.HeapObjects) - int64(start.HeapObjects)

	fmt.Printf(`üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ %d —Å–µ–∫:
  üíæ –ü–∞–º—è—Ç—å: %.2f MB (%+.2f)
  üóëÔ∏è –°–±–æ—Ä–æ–∫ –º—É—Å–æ—Ä–∞: +%d
  üîÑ –ì–æ—Ä—É—Ç–∏–Ω: %d (%+d)
  üì¶ –û–±—ä–µ–∫—Ç–æ–≤: %d (%+d)
`,
		seconds, end.AllocMB, allocDelta,
		gcDelta, end.Goroutines, goroutineDelta,
		end.HeapObjects, objectsDelta)
}

// ForceGCAndMeasure –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º
func (m *MemoryMonitor) ForceGCAndMeasure() (before, after MemoryStats) {
	// –ó–∞–º–µ—Ä –¥–æ GC
	m.collectStats()
	before = m.GetCurrentStats()

	fmt.Println("üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞...")
	runtime.GC()
	runtime.GC() // –î–≤–æ–π–Ω–æ–π –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏

	time.Sleep(100 * time.Millisecond) // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –æ—á–∏—Å—Ç–∫—É

	// –ó–∞–º–µ—Ä –ø–æ—Å–ª–µ GC
	m.collectStats()
	after = m.GetCurrentStats()

	freed := before.AllocMB - after.AllocMB
	fmt.Printf("üßπ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: %.2f MB (–±—ã–ª–æ: %.2f MB, —Å—Ç–∞–ª–æ: %.2f MB)\n",
		freed, before.AllocMB, after.AllocMB)

	return before, after
}
