package terminal

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"strings"
	"testing"
)

// captureOutput –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç stdout –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
func captureOutput(f func()) string {
	old := os.Stdout
	r, w, _ := os.Pipe()
	os.Stdout = w

	f()

	err := w.Close()
	if err != nil {
		return ""
	}
	os.Stdout = old

	var buf bytes.Buffer
	_, err = io.Copy(&buf, r)
	if err != nil {
		return ""
	}
	return buf.String()
}

// TestNewCursorManager –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä CursorManager –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
func TestNewCursorManager(t *testing.T) {
	cm := NewCursorManager()

	if cm == nil {
		t.Fatal("NewCursorManager –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nil")
	}

	if cm.currentRow != 1 {
		t.Errorf("–û–∂–∏–¥–∞–µ–º —á—Ç–æ currentRow –±—É–¥–µ—Ç 1, –ø–æ–ª—É—á–µ–Ω–æ %d", cm.currentRow)
	}

	if cm.currentCol != 1 {
		t.Errorf("–û–∂–∏–¥–∞–µ–º —á—Ç–æ currentCol –±—É–¥–µ—Ç 1, –ø–æ–ª—É—á–µ–Ω–æ %d", cm.currentCol)
	}
}

// TestMoveTo –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ç–æ–¥ moveTo, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª—è—è –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
func TestMoveTo(t *testing.T) {
	tests := []struct {
		name string
		col  int
		row  int
		want string
	}{
		{
			name: "–û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ 1,1",
			col:  1,
			row:  1,
			want: "\033[1;1H",
		},
		{
			name: "–û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ 10,5",
			col:  10,
			row:  5,
			want: "\033[5;10H",
		},
		{
			name: "–û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ 100,50",
			col:  100,
			row:  50,
			want: "\033[50;100H",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cm := NewCursorManager()
			output := captureOutput(func() {
				cm.MoveTo(tt.col, tt.row)
			})

			if output != tt.want {
				t.Errorf("MoveTo(%d, %d) –≤–µ—Ä–Ω—É–ª = %q, —Ö–æ—Ç–µ–ª–∏ %q", tt.col, tt.row, output, tt.want)
			}

			if cm.currentRow != tt.row {
				t.Errorf("currentRow = %d, —Ö–æ—Ç–µ–ª–∏ %d", cm.currentRow, tt.row)
			}

			if cm.currentCol != tt.col {
				t.Errorf("currentCol = %d, —Ö–æ—Ç–µ–ª–∏ %d", cm.currentCol, tt.col)
			}
		})
	}
}

// TestClearLine –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è ClearLine –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∫—É—Ä—Å–æ—Ä –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É.
func TestClearLine(t *testing.T) {
	cm := NewCursorManager()

	output := captureOutput(func() {
		cm.ClearLine(5)
	})

	expectedMoveTo := "\033[5;1H"
	expectedClear := "\033[K"
	expected := expectedMoveTo + expectedClear

	if output != expected {
		t.Errorf("ClearLine(5) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç = %q, —Ö–æ—Ç–µ–ª–∏ %q", output, expected)
	}
}

// TestClearArea –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è ClearArea –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—á–∏—â–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.
// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—è –µ–≥–æ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
// –∏ –ø—Ä–æ–±–µ–ª–∞–º–∏ ANSI.
func TestClearArea(t *testing.T) {
	tests := []struct {
		name   string
		col    int
		row    int
		length int
	}{
		{
			name:   "–æ—á–∏—â–∞–µ—Ç 5 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞—á–∏–Ω–∞—è 10,5",
			col:    10,
			row:    5,
			length: 5,
		},
		{
			name:   "–æ—á–∏—â–∞–µ—Ç 20 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞—á–∏–Ω–∞—è 1,1",
			col:    1,
			row:    1,
			length: 20,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cm := NewCursorManager()

			output := captureOutput(func() {
				cm.ClearArea(tt.col, tt.row, tt.length)
			})

			expectedMoveTo := fmt.Sprintf("\033[%d;%dH", tt.row, tt.col)
			expectedSpaces := strings.Repeat(" ", tt.length)
			expected := expectedMoveTo + expectedSpaces

			if output != expected {
				t.Errorf("ClearArea() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç = %q, —Ö–æ—Ç–µ–ª–∏ %q", output, expected)
			}
		})
	}
}

// TestClearRect –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ç–æ–¥ clearRect, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—á–∏—â–∞–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
// —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–±–µ–ª–æ–≤
func TestClearRect(t *testing.T) {
	cm := NewCursorManager()

	output := captureOutput(func() {
		cm.ClearRect(5, 2, 10, 4)
	})

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—á–∏—â–∞—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∏ 2, 3, 4
	// –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞: MoveTo + 6 –ø—Ä–æ–±–µ–ª–æ–≤ (10-5+1)
	if !strings.Contains(output, "\033[2;5H") {
		t.Error("ClearRect –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–æ–∫—É 2")
	}
	if !strings.Contains(output, "\033[3;5H") {
		t.Error("ClearRect –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–æ–∫—É 3")
	}
	if !strings.Contains(output, "\033[4;5H") {
		t.Error("ClearRect –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–æ–∫—É 4")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 6 –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É)
	spaces := strings.Count(output, "      ")
	if spaces != 3 {
		t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å 3 –≥—Ä—É–ø–ø—ã –ø–æ 6 –ø—Ä–æ–±–µ–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ %d", spaces)
	}
}

// TestWriteAt –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ç–æ–¥ WriteAt, —á—Ç–æ —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
func TestWriteAt(t *testing.T) {
	tests := []struct {
		name string
		col  int
		row  int
		text string
	}{
		{
			name: "–∑–∞–ø–∏—Å—å hello –≤ –ø–æ–∑–∏—Ü–∏–∏ 10,5",
			col:  10,
			row:  5,
			text: "hello",
		},
		{
			name: "–∑–∞–ø–∏—Å—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏",
			col:  1,
			row:  1,
			text: "",
		},
		{
			name: "–∑–∞–ø–∏—Å—å —Å unicode",
			col:  5,
			row:  3,
			text: "–ø—Ä–∏–≤–µ—Ç üéâ",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cm := NewCursorManager()

			output := captureOutput(func() {
				cm.WriteAt(tt.col, tt.row, tt.text)
			})

			expectedMoveTo := fmt.Sprintf("\033[%d;%dH", tt.row, tt.col)
			expected := expectedMoveTo + tt.text

			if output != expected {
				t.Errorf("WriteAt() –≤—ã–≤–æ–¥ = %q, –æ–∂–∏–¥–∞–ª–æ—Å—å %q", output, expected)
			}
		})
	}
}

// TestUpdateArea –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ UpdateArea, —Å—Ä–∞–≤–Ω–∏–≤–∞—è –µ–≥–æ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è–º–∏ –∫—É—Ä—Å–æ—Ä–∞ –∏
// —Ç–µ–∫—Å—Ç–æ–º
func TestUpdateArea(t *testing.T) {
	cm := NewCursorManager()

	output := captureOutput(func() {
		cm.UpdateArea(10, 5, 8, "new")
	})

	// –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: MoveTo + 8 –ø—Ä–æ–±–µ–ª–æ–≤ + MoveTo + "new"
	expectedMoveTo := "\033[5;10H"
	expectedClear := strings.Repeat(" ", 8)
	expectedText := "new"
	expected := expectedMoveTo + expectedClear + expectedMoveTo + expectedText

	if output != expected {
		t.Errorf("UpdateArea() –≤—ã—Ö–æ–¥ = %q, —Ö–æ—Ç–µ–ª–∏ %q", output, expected)
	}
}

// TestHideCursor –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞ HideCursor, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –≤—ã–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é
// escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ANSI.
func TestHideCursor(t *testing.T) {
	cm := NewCursorManager()

	output := captureOutput(func() {
		cm.HideCursor()
	})

	expected := "\033[?25l"
	if output != expected {
		t.Errorf("HideCursor() –≤—ã—Ö–æ–¥ = %q, —Ö–æ—Ç–µ–ª–∏ %q", output, expected)
	}
}

// TestShowCursor –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ç–æ–¥ ShowCursor, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –≤—ã–¥–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—É—é escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ANSI
// –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞.
func TestShowCursor(t *testing.T) {
	cm := NewCursorManager()

	output := captureOutput(func() {
		cm.ShowCursor()
	})

	expected := "\033[?25h"
	if output != expected {
		t.Errorf("ShowCursor() –≤—ã—Ö–æ–¥ = %q, —Ö–æ—Ç–µ–ª–∏ %q", output, expected)
	}
}

// TestCursorManagerState –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CursorManager –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞
// moveTo.
func TestCursorManagerState(t *testing.T) {
	cm := NewCursorManager()

	// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	if cm.currentRow != 1 || cm.currentCol != 1 {
		t.Error("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1,1")
	}

	// –ü–æ—Å–ª–µ MoveTo —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
	captureOutput(func() {
		cm.MoveTo(10, 20)
	})

	if cm.currentRow != 20 {
		t.Errorf("–ü–æ—Å–ª–µ MoveTo(10, 20) currentRow = %d, –æ–∂–∏–¥–∞–ª–æ—Å—å 20", cm.currentRow)
	}
	if cm.currentCol != 10 {
		t.Errorf("–ü–æ—Å–ª–µ MoveTo(10, 20) currentCol = %d, –æ–∂–∏–¥–∞–ª–æ—Å—å 10", cm.currentCol)
	}
}

// TestClearRectBoundaries –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ clearRect, —Ç–µ—Å—Ç–∏—Ä—É—è –µ–≥–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ—á–∏—â–∞—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–Ω—Å–æ–ª–∏.
func TestClearRectBoundaries(t *testing.T) {
	tests := []struct {
		name                               string
		startCol, startRow, endCol, endRow int
		expectedRows                       int
		expectedWidth                      int
	}{
		{
			name:          "–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞",
			startCol:      1,
			startRow:      1,
			endCol:        5,
			endRow:        1,
			expectedRows:  1,
			expectedWidth: 5,
		},
		{
			name:          "3x3 –æ–±–ª–∞—Å—Ç—å",
			startCol:      1,
			startRow:      1,
			endCol:        3,
			endRow:        3,
			expectedRows:  3,
			expectedWidth: 3,
		},
		{
			name:          "1x10 –æ–±–ª–∞—Å—Ç—å",
			startCol:      5,
			startRow:      10,
			endCol:        5,
			endRow:        19,
			expectedRows:  10,
			expectedWidth: 1,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cm := NewCursorManager()

			output := captureOutput(func() {
				cm.ClearRect(tt.startCol, tt.startRow, tt.endCol, tt.endRow)
			})

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π MoveTo
			moveCount := strings.Count(output, "\033[")
			if moveCount != tt.expectedRows {
				t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å %d —Å—Ç—Ä–æ–∫, –ø–æ–ª—É—á–µ–Ω–æ %d", tt.expectedRows, moveCount)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∏—Ä–∏–Ω—É –ø–æ –¥–ª–∏–Ω–µ –ø—Ä–æ–±–µ–ª–æ–≤
			spaces := strings.Repeat(" ", tt.expectedWidth)
			spaceCount := strings.Count(output, spaces)
			if spaceCount != tt.expectedRows {
				t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å %d –≥—Ä—É–ø–ø –ø–æ %d –ø—Ä–æ–±–µ–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ %d", tt.expectedRows, tt.expectedWidth, spaceCount)
			}
		})
	}
}
