package logger

import (
	"fmt"
	"strings"
)

// –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const (
	LogOff     int8 = 0
	LogError   int8 = 1
	LogWarning int8 = 2
	LogInfo    int8 = 3
	LogDebug   int8 = 4
	LogTrace   int8 = 5
)

var currentLogLevel int8 = LogInfo // –ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func log(level int8, category string, args ...interface{}) {
	if level <= currentLogLevel {
		prefix := getLogPrefix(level, category)
		fmt.Print(prefix)
		fmt.Println(args...)
	}
}

func getLogPrefix(level int8, category string) string {
	var levelStr, emoji string

	switch level {
	case LogError:
		levelStr, emoji = "ERROR", "‚ùå"
	case LogWarning:
		levelStr, emoji = "WARN ", "‚ö†Ô∏è"
	case LogInfo:
		levelStr, emoji = "INFO ", "‚ÑπÔ∏è"
	case LogDebug:
		levelStr, emoji = "DEBUG", "üêõ"
	case LogTrace:
		levelStr, emoji = "TRACE", "üîç"
	default:
		levelStr, emoji = "UNKNOWN", "‚ùì"
	}

	return fmt.Sprintf("%s [%s] %s: ", emoji, levelStr, strings.ToUpper(category))
}

// –£–¥–æ–±–Ω—ã–µ —Ö–µ–ª–ø–µ—Ä—ã
func ErrorLog(category string, args ...interface{}) { log(LogError, category, args...) }
func WarnLog(category string, args ...interface{})  { log(LogWarning, category, args...) }
func InfoLog(category string, args ...interface{})  { log(LogInfo, category, args...) }
func DebugLog(category string, args ...interface{}) { log(LogDebug, category, args...) }
func TraceLog(category string, args ...interface{}) { log(LogTrace, category, args...) }
